# requirements.txt - list all the packages the project needs
# Ignore hashes (#) - they are just used to create comments.
# Hashes will be ignored when we install packages using this file. 

# ======================================================
# STEP A - CREATE A LOCAL PROJECT VIRTUAL ENV (.venv)
# ======================================================

# Create your local project virtual environment
# This step ensures you have an isolated Python environment for your project.
# This is typically just done once at the beginning of a project.
# If it gets messed up, we can delete .venv and recreate it at any time. 

# Run the following command to create a virtual environment in the project root.

### On Windows, Use PowerShell (not cmd) - don't include the #:
# py -3.11 -m venv .venv

### On Mac  - don't include the #:
# brew install python@3.11
# python3 -m venv .venv

### On Linux/WSL - don't include the #:
# sudo apt update
# sudo apt install python3.11 python3.11-venv
# python3.11 -m venv .venv

### If VS Code asks: We noticed a new environment has been created. 
# Do you want to select it for the workspace folder?
# Click Yes. 

# ======================================================
# STEP B - ALWAYS ACTIVATE THE (.venv) WHEN OPENING A NEW TERMINAL
# ======================================================

# ALWAYS activate the .venv before working on the project.
# Activate whenever you open a new terminal. 

### Windows PowerShell Command (don't include the #):
# .\.venv\Scripts\activate

### Mac/Linux Command (don't include the #):
# source .venv/bin/activate

# Verify: When active, you can usually see (.venv) in the terminal.

# If using a Jupyter notebook, select the kernel associated with your project (.venv).

# ======================================================
# STEP C - INSTALL PACKAGES INTO (.venv) AS NEEDED
# ======================================================

# Install necessary packages listed below with this command:
# Keep packages updated with the most recent versions.

# When you identify a new package you want to use, 
# Just update the list below and re-run this command. 

### Windows Command (don't include the #):
# py -m pip install --upgrade pip setuptools wheel
# py -m pip install -r requirements.txt

### Mac/Linux Command (don't include the #):
# python3 -m pip install --upgrade pip setuptools wheel
# python3 -m pip install --upgrade -r requirements.txt

# When you identify a new package you want to use, 
# Just update the list below and re-run the install command. 

# ======================================================
# VS CODE: Select Interpreter
# ======================================================
# VS Code needs our populated .venv to interpret our files correctly.
# To set the VS Code Interpreter:
# 1. Open the Command Palette: Press Ctrl+Shift+P (Windows/Linux) or Cmd+Shift+P (Mac).
# 2. Search for "Python: Select Interpreter":
# 3. Type Python: Select Interpreter in the Command Palette search bar and select it from the dropdown.
# 4. Choose an Interpreter - A list of available Python environments will appear.
#    Look for the local .venv option.
# 5. Once selected, check the Python version displayed 
#    in the bottom-left corner of the VS Code window in the status bar.

# ======================================================
# ESSENTIAL TOOLS
# ======================================================

# Up-to-date package management tools
pip
setuptools
wheel

# Easy logging for monitoring code execution
loguru

# Environment variables management
python-dotenv

# pytest for lightweight testing
pytest

# ======================================================
# DATA ANALYSIS 
# ======================================================

# Numerical computations and arrays (20-30 MB)
numpy

# Data manipulation and analysis (built on numpy, 10-20 MB)
pandas

# ======================================================
# KAFKA STREAMING MESSAGE BROKER INTEGRATION
# ======================================================

# Kafka Python client (lightweight, ~1 MB)
# Supports Kafka 3.5+ with KRaft mode (no ZooKeeper required)
kafka-python-ng

# ======================================================
# DATABASE INTEGRATION 
# ======================================================

# sqlite3
# - Most popular and accessible: included in Python Std Lib.
# - Great for beginners, small projects, and teaching.
# - No install required.

# DuckDB
# - Growing rapidly in popularity for analytics.
# - In-process OLAP engine (no server needed).
# - Super easy to install (just one package).
duckdb

# pyarrow
# - For Apache Arrow/Parquet support.
# - Optional: enhances DuckDB and Pandas interoperability.
# Uncomment the line below to install pyarrow.
# pyarrow

# duckdb-engine
# - Optional SQLAlchemy dialect for DuckDB.
# - Needed only if you want DuckDB via SQLAlchemy ORM.
# Uncomment the line below to install duckdb-engine.
# duckdb-engine

# SQLAlchemy
# - Very popular toolkit/ORM to unify DB access across SQLite, Postgres, MySQL, etc.
# Uncomment the line below to install SQLAlchemy.
# SQLAlchemy

# psycopg2
# - Standard PostgreSQL adapter.
# - Needed if DATABASE_TYPE=postgres.
# Uncomment the line below to install psycopg2.
# psycopg2

# PyMySQL
# - MySQL client library.
# - Needed if DATABASE_TYPE=mysql.
# Uncomment the line below to install PyMySQL.
# PyMySQL
